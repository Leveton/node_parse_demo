{
  "name": "node-parse-api",
  "description": "A Parse.com REST API client for Node.js",
  "version": "0.3.7",
  "author": {
    "name": "Chris Johnson",
    "email": "tenorviol@yahoo.com"
  },
  "contributors": [
    {
      "name": "Daniel Gasienica",
      "email": "daniel@gasienica.ch"
    },
    {
      "name": "Jakub Knejzlík"
    },
    {
      "name": "Sam Saccone"
    },
    {
      "name": "Arnaud Rinquin"
    },
    {
      "name": "Charles Julian Knight"
    },
    {
      "name": "Barrington Haynes"
    },
    {
      "name": "Christian Monaghan"
    },
    {
      "name": "Christoffer Niska"
    },
    {
      "name": "Rodrigo Martell"
    },
    {
      "name": "Joe Bruggeman"
    },
    {
      "name": "Omar A"
    },
    {
      "name": "Andrey"
    },
    {
      "name": "Rafael Galdêncio"
    },
    {
      "name": "Akhmad Fathonih"
    },
    {
      "name": "Kody J. Peterson"
    },
    {
      "name": "Jo Jordens"
    },
    {
      "name": "Appsaloon"
    }
  ],
  "main": "index",
  "scripts": {
    "test": "nodeunit"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/leveton/node-parse-api"
  },
  "keywords": [
    "parse",
    "mbaas",
    "rest",
    "push notifications",
    "api"
  ],
  "engines": {
    "node": ">= 0.4.0"
  },
  "devDependencies": {
    "nodeunit": "~0.9.0"
  },
  "readme": "Node Parse API\n==============\n\ninstall\n-------\n\n```\nnpm install node-parse-api\n```\n\nexamples\n--------\n\n### setup with MASTER_KEY\n\n```javascript\nvar Parse = require('node-parse-api').Parse;\n\nvar APP_ID = ...;\nvar MASTER_KEY = ...;\n\nvar app = new Parse(APP_ID, MASTER_KEY);\n```\n\n### setup with API_KEY\n\n```javascript\nvar Parse = require('node-parse-api').Parse;\n\nvar options = {\n    app_id:'...',\n    api_key:'...' // master_key:'...' could be used too\n}\n\nvar app = new Parse(options);\n```\n\n### insert an object\n\n* insert(className `string`, data `object`, callback `function`)\n\n```javascript\n// add a Foo object, { foo: 'bar' }\napp.insert('Foo', { foo: 'bar' }, function (err, response) {\n  console.log(response);\n});\n```\n\n### insert a User\n\n* insertUser(data `object`, callback `function`)\n\n```javascript\napp.insertUser({\n  username: 'foo',\n  password: 'bar'\n}, function (err, response) {\n  console.log(response);\n});\n```\n\nMore properties can be provided, but username and password are required.\n\n### insert a User with a Pointer\n\n```javascript\napp.insertUser({\n  username: 'foo',\n  password: 'bar',\n  pointer/*can have any name*/: {\n    __type: 'Pointer',\n    className: <string>,\n    objectId: <string>\n    }\n  }, function (err, response) {\n  console.log(response);\n});\n```\n\n### insert a User with GeoPoints\n\n```javascript\napp.insertUser({\n  username: 'foo',\n  password: 'bar',\n  location: {\n    __type: 'GeoPoint',\n    latitude: <int>,\n    longitude: <int>\n    }\n  }, function (err, response) {\n  console.log(response);\n});\n```\n\n### user login\n\n* loginUser(username `string`, password `string`, callback `function`)\n\nResponse contains all of the user fields except password, also includes a sessionToken for this user.\n\n```javascript\napp.loginUser('foo', 'bar', function (error, response) {\n  // response = {sessionToken: '', createdAt: '', ... }\n  });\n```\n\n### me\n\n* me(sessionToken `string`, callback `function`)\n\n```javascript\napp.me('sessionToken', function (error, response) {\n  // response is same as getUser response\n});\n```\n\n### insert a file\n\n*  insertFile(fileName `string`, data `string/buffer`, contentType `string`, callback `function`)\n\n```javascript\n// first upload the file to the parse cloud\napp.insertFile('foo.txt', 'bar', 'text/plain', function (err, response) {\n  // then insert a new object with the link to the new file\n  app.insert('MyFile', {__type: 'File', \"name\": response.name }, function (error, response) {\n  });\n});\n```\n\n### find one\n\n* find(className `string`, query `object`, callback `function`)\n\n```javascript\n// the Foo with id = 'someId'\napp.find('Foo', {objectId: 'someId'}, function (err, response) {\n  console.log(response);\n});\n```\n\nReturned fields can be restricted with the 'keys' query.\n\n```javascript\nvar query = {\n  objectId: 'someId',\n  keys: 'foo,bar'\n};\napp.find('Foo', query, function (error, response) {\n  //response object will only contain foo and bar fields, as well as the special built-in fields (objectId, createdAt and updatedAt)\n  });\n```\n\n### find many\n\n* find(className `string`, query `object`, callback `function`)\n\n```javascript\n// all Foo objects with foo = 'bar'\napp.find('Foo', {where: {foo: 'bar'}}, function (err, response) {\n  console.log(response);\n});\n\n// all Foo objects\n// '', null, undefined or any other falsy value will work\napp.find('Foo', '', function (err, response) {\n  console.log(response);\n}):\n```\n\nAll types of query constraints Parse provides can be added to the query object as properties. (order, limit, keys, count, include...)\n\n```javascript\nvar query = {\n  where: {\n    foo: 'bar',\n    baz: 'qux'\n  },\n  limit: 10,\n  skip: 5,\n  order: '-createdAt'\n};\napp.find('Foo', query, function (error, response ) {\n  // the first 5 results will be ignored and the next 10 results will be returned\n  // response.results will contain up to 10 objects with foo = 'bar' and baz = 'qux', sorted from latest to oldest\n  });\n```\n\n### find one user\n\n* getUser(query `object`, callback `function`)\n\n```javascript\napp.find({objectId: 'someId'}, function (err, response) {\n  console.log(response);\n});\n```\n\n### find many users\n\n* getUser(query `object`, callback `function`)\n\n```javascript\n// all users with foo = 'bar'\napp.find({where: {foo: 'bar'}}, function (err, response) {\n  console.log(response);\n});\n\n// all users\n// '', null, undefined or any other falsy value will work\napp.find('', function (err, response) {\n  console.log(response);\n}):\n```\n\n### count the number of objects\n\n```javascript\n\nvar query = {\n  count: 1,\n  limit: 0\n};\napp.find('Foo', query, function (error, response) {\n  // {\n  //   results: [],\n  //   count: 123\n  // }\n});\n```\n\n### edit an object\n\n* update(className `string`, objectId `string`, callback `function`)\n\n```javascript\napp.update('Foo', 'someId', {foo: 'bar'}, function (err, response) {\n  console.log(response);\n});\n```\n\n### delete an object\n\n* delete(className `string`, objectId `string`, callback `function`)\n\n```javascript\napp.delete('Foo', 'someId', function (err, response) {\n  // response = {}\n});\n```\n\n### delete all objects in a class\n\n* deleteAll(className `string`, callback `function`)\n\n```javascript\napp.deleteAll('Foo', function (err, response) {\n  // response = [{success: {}, success: {}, ... }]\n});\n```\n\n### delete user\n\n* deleteUser(objectId `string`, [sessionToken `string`], callback `function`)\n\nIf you are using the master key you don't need any session tokens.\n\n```javascript\napp.deleteUser('someId', function (err, response) {\n  // response = {}\n});\n```\n\nIf you're using the rest api key you will need a session token and will only be able to delete the user object of the matching user.\n\n```javascript\napp.deleteUser('someId', 'sessionToken', function (error, response) {\n  // response = {}\n});\n```\n\n### delete all users\n\n* deleteAllUsers(callback `function`)\n\nThis will only work when using the master key.\n\n```javascript\napp.deleteAllUsers(function (err, response) {\n  // response = [{success: {}, success: {}, ... }]\n});\n```\n\n### reset a password\n\n* passwordReset(data `string`, callback `function`)\n\n```javascript\n//email is built into Parse's special User class\napp.passwordReset(email, function(err, response){\n  console.log(response);\n});\n```\n\n### edit a user object\n\n* updateUser(objectId `string`, data `object`, [sessionToken `string`], callback `function`)\n\nWith master key\n\n```javascript\napp.updateUser('someId', {email: 'foo@example.com'}, function(err, response){\n  console.log(response);\n});\n```\n\nor with rest api key\n\n```javascript\napp.updateUser('someId', {email: 'foo@example.com'}, 'sesstionToken', function(err, response){\n  console.log(response);\n});\n```\n\n### batch requests\n\n* batch(requests `array`, callback `function`)\n\n```javascript\nvar requests = [\n  {\n    method: 'POST',\n    path: '/1/classes/Foo',\n    body: {\n      foo: 'bar1',\n      baz: 'qux1'\n    }\n  },\n  {\n    method: 'POST',\n    path: '/1/classes/Foo',\n    body: {\n      foo: 'bar2',\n      baz: 'qux2'\n    }\n  }\n];\napp.batch(requests, function (error, response) {\n  // response = [{success: {createdAt: '', objectId: ''}, {success: {...}}}]\n});\n```\n\n### insert installation data\n\n```javascript\n//first arg is either 'ios' or 'android'.  second arg is either the Apple deviceToken or the Android installationId.\napp.insertInstallationData(\"ios\", \"0123456784abcdef0123456789abcdef0123456789abcdef0123456789abcdef\", function(err, response){\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(response);\n  }\n});\n```\n\n### insert installation data with timeZone\n\n```javascript\n//first arg is either 'ios' or 'android'.  second arg is either the Apple deviceToken or the Android installationId.  Third arg is the timezone string.\napp.insertInstallationDataWithTimeZone(\"ios\", \"0123456784abcdef0123456789abcdef0123456789abcdef0123456789abcdef\", \"EST\", function(err, response){\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(response);\n  }\n});\n```\n\n### insert installation data with channels\n\n```javascript\n//first arg is either 'ios' or 'android'.  second arg is either the Apple deviceToken or the Android installationId.  Third arg is the channels array.\narr = [\"news\", \"sports\"];\napp.insertInstallationDataWithChannels(\"ios\", \"0123456784abcdef0123456789abcdef0123456789abcdef0123456789abcdef\", arr, function(err, response){\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(response);\n  }\n});\n```\n\n### insert installation data with timeZone and channels\n\n```javascript\n//first arg is either 'ios' or 'android'.  second arg is either the Apple deviceToken or the Android installationId.  Third arg is the timezone string.  4th is the channels array.\narr = [\"news\", \"sports\"];\napp.insertInstallationDataWithTimeZoneAndChannels(\"ios\", \"0123456784abcdef0123456789abcdef0123456789abcdef0123456789abcdef\", \"EST\", arr, function(err, response){\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(response);\n  }\n});\n```\n\n### create a role for a particular user\n\n```javascript\n//create a data object that links the user object's objectId to the role\n\nvar data = {\n  name: 'Administrator',\n  ACL: {\n      \"*\": {\n        \"read\": true\n      }\n    },\n  roles: {\n      \"__op\": \"AddRelation\",\n      \"objects\": [\n        {\n          \"__type\": \"Pointer\",\n          \"className\": \"_Role\",\n         \"objectId\": \"<objectId>\"\n        }\n      ]\n    },\n  users: {\n      \"__op\": \"AddRelation\",\n      \"objects\": [\n        {\n          \"__type\": \"Pointer\",\n          \"className\": \"_User\",\n          \"objectId\": \"<objectId>\"\n        }\n      ]\n    }\n};\n\n  app.insertRole(data, function(err, resp){\n     console.log(resp);\n   });\n```\n\n### get a role\n\n```javascript\n//pass the role object's objectId\napp.getRole(\"<objectId>\", function(err, resp){\n  console.log(resp);\n});\n```\n\n### update a role\n\n```javascript\n//pass the objectId of the role, data contains the user's objectId\n\nvar data = {\n  users: {\n      \"__op\": \"RemoveRelation\",\n      \"objects\": [\n        {\n          \"__type\": \"Pointer\",\n          \"className\": \"_User\",\n          \"objectId\": \"<objectId>\"\n        }\n      ]\n    }\n};\n\n  app.updateRole(\"<objectId>\", data, function(err, resp){\n    console.log(resp);\n  });\n```\n\n### delete a role\n\n```javascript\n//pass the objectId of the role\napp.deleteRole(\"<objectId>\", function(err, resp){});\n```\n\n### get all the roles\n\n```javascript\napp.getRoles(function(err, resp){});\n```\n\n### get a role against a cetain param\n\n```javascript\nvar params = {\n   where: { name: \"Administrator\" }\n};\n\n   app.getRoles(params, function(err, resp){\n     console.log(resp);\n   });\n```\n\n### send a push notification\n\n```javascript\n//The data param has to follow the data structure as described in the [Parse REST API](https://www.parse.com/docs/rest#push)\nvar notification = {\n  channels: [''],\n  data: {\n    alert: \"sending too many push notifications is obnoxious\"\n  }\n};\napp.sendPush(notification, function(err, resp){\n  console.log(resp);\n});\n```\n\n### note on sending dates\n\n```javascript\n//when inserting a data, you must use the Parse date object structure, i.e.:\n{\n  \"__type\": \"Date\",\n  \"iso\": new Date(\"<year>\", \"<month>\", \"<day>\").toJSON()\n}\n```\n\n# License\n\nnode-parse-api is available under the MIT license.\n\nCopyright © 2015 Mike Leveton and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "gitHead": "87cbfbaf9ba07921204d92d227e26971920cfae2",
  "bugs": {
    "url": "https://github.com/leveton/node-parse-api/issues"
  },
  "homepage": "https://github.com/leveton/node-parse-api",
  "_id": "node-parse-api@0.3.7",
  "_shasum": "518664d017362222e64f5b974b0f06597820efe9",
  "_from": "node-parse-api@0.3.7"
}
